#include "asm.h"
#include "regdef.h"
#include "inst_test.h"

LEAF(n4_sub_w_test)
    
    addi.w s0, s0 ,1
    li     s2, 0x00
###test inst
    TEST_SUB_W(0xd6fc0584, 0x5f9765a8, 0x77649fdc)
    TEST_SUB_W(0xbf9c95c2, 0x3368890e, 0x8c340cb4)
    TEST_SUB_W(0xda67a888, 0xa727b830, 0x333ff058)
    TEST_SUB_W(0x23858808, 0x657a98bc, 0xbe0aef4c)
    TEST_SUB_W(0x040ae1f0, 0x4eff0fe8, 0xb50bd208)
    TEST_SUB_W(0x45c9e968, 0xbaecca18, 0x8add1f50)
    TEST_SUB_W(0x541bce6c, 0xe3eeb018, 0x702d1e54)
    TEST_SUB_W(0x02825068, 0xa1de973a, 0x60a3b92e)
    TEST_SUB_W(0xf8c113c0, 0x052ce450, 0xf3942f70)
    TEST_SUB_W(0x96868792, 0xd109051c, 0xc57d8276)
    TEST_SUB_W(0xf53c6d68, 0xc1c46588, 0x337807e0)
    TEST_SUB_W(0x15f9b790, 0xd2e20d27, 0x4317aa69)
    TEST_SUB_W(0xdd8a4223, 0x350d15c0, 0xa87d2c63)
    TEST_SUB_W(0x8f31c286, 0x2ceae250, 0x6246e036)
    TEST_SUB_W(0x75c83600, 0x32f94254, 0x42cef3ac)
    TEST_SUB_W(0x423723c4, 0x7aa165d0, 0xc795bdf4)
    TEST_SUB_W(0x32e571f0, 0xbaecc1ac, 0x77f8b044)
    TEST_SUB_W(0xc5d06600, 0x91611ea8, 0x346f4758)
    TEST_SUB_W(0x00c60432, 0x98b25356, 0x6813b0dc)
    TEST_SUB_W(0x18a11fa1, 0xdde917e4, 0x3ab807bd)
    TEST_SUB_W(0xc5005fc8, 0xe132c555, 0xe3cd9a73)
    TEST_SUB_W(0xb3719000, 0x369995a3, 0x7cd7fa5d)
    TEST_SUB_W(0xc334c06c, 0x95e84978, 0x2d4c76f4)
    TEST_SUB_W(0xebdf0650, 0xf6251700, 0xf5b9ef50)
    TEST_SUB_W(0x8343a5d0, 0x5a87c844, 0x28bbdd8c)
    TEST_SUB_W(0x6b53ec00, 0x0f8d3793, 0x5bc6b46d)
    TEST_SUB_W(0xafeb38c2, 0x4ad9906c, 0x6511a856)
    TEST_SUB_W(0xd6772c6c, 0xa1cf2440, 0x34a8082c)
    TEST_SUB_W(0xd593ae94, 0x8e0bc704, 0x4787e790)
    TEST_SUB_W(0x7e429d08, 0x331dd000, 0x4b24cd08)
    TEST_SUB_W(0x0f80fb92, 0xe9344e60, 0x264cad32)
    TEST_SUB_W(0xe875e234, 0x0d1e885c, 0xdb5759d8)
    TEST_SUB_W(0x6f5f8dd7, 0x65931578, 0x09cc785f)
    TEST_SUB_W(0x7675c428, 0x90bdfbb0, 0xe5b7c878)
    TEST_SUB_W(0xa915ba2f, 0x0917c008, 0x9ffdfa27)
    TEST_SUB_W(0x9194ded8, 0x7cca603c, 0x14ca7e9c)
    TEST_SUB_W(0x19344280, 0x921db4d2, 0x87168dae)
    TEST_SUB_W(0xb17c33ec, 0x98e7f1c8, 0x18944224)
    TEST_SUB_W(0xf05dec60, 0xd3d05b00, 0x1c8d9160)
    TEST_SUB_W(0x8be2ec4e, 0x2f1e8ff6, 0x5cc45c58)
    TEST_SUB_W(0x5e69e280, 0x6b1cb358, 0xf34d2f28)
    TEST_SUB_W(0x23b4e63e, 0x01cb27a8, 0x21e9be96)
    TEST_SUB_W(0x73a2f524, 0x13424cfd, 0x6060a827)
    TEST_SUB_W(0xaf2ddbd0, 0xa7c8a588, 0x07653648)
    TEST_SUB_W(0x40bccb24, 0xd51ea0e8, 0x6b9e2a3c)
    TEST_SUB_W(0xd55f1d58, 0xebcbf0d8, 0xe9932c80)
    TEST_SUB_W(0x40007d14, 0x73b40222, 0xcc4c7af2)
    TEST_SUB_W(0x4c8d32a0, 0xc29f112c, 0x89ee2174)
    TEST_SUB_W(0x5190e68a, 0x7c96b13c, 0xd4fa354e)
    TEST_SUB_W(0x6c659034, 0xaee0b7cc, 0xbd84d868)
    TEST_SUB_W(0xbe3903d0, 0x0375ed52, 0xbac3167e)
    TEST_SUB_W(0xf8ecec8d, 0x6ecabe4b, 0x8a222e42)
    TEST_SUB_W(0x1836ae30, 0x91e3d038, 0x8652ddf8)
    TEST_SUB_W(0xad52af54, 0x8db84360, 0x1f9a6bf4)
    TEST_SUB_W(0x4117ea50, 0xd5b6bf90, 0x6b612ac0)
    TEST_SUB_W(0x6b140b9e, 0x09d53740, 0x613ed45e)
    TEST_SUB_W(0x45d3b555, 0xee9f1b40, 0x57349a15)
    TEST_SUB_W(0x68f8ee5b, 0x2b20c916, 0x3dd82545)
    TEST_SUB_W(0xaca702e6, 0x0e8f0170, 0x9e180176)
    TEST_SUB_W(0x5b20ef94, 0x14f62c69, 0x462ac32b)
    TEST_SUB_W(0x49139100, 0x3f3cb630, 0x09d6dad0)
    TEST_SUB_W(0xee440f3c, 0xdd85e334, 0x10be2c08)
    TEST_SUB_W(0xf44f8ae0, 0x9f66ac00, 0x54e8dee0)
    TEST_SUB_W(0x58ff0bd0, 0xc6789a58, 0x92867178)
    TEST_SUB_W(0x3a6a59dd, 0xa85759f4, 0x9212ffe9)
    TEST_SUB_W(0x720a6644, 0xda5b3a4a, 0x97af2bfa)
    TEST_SUB_W(0x4b26bda0, 0xe7a23c38, 0x63848168)
    TEST_SUB_W(0x54c90300, 0x59bcdc53, 0xfb0c26ad)
    TEST_SUB_W(0x587112f8, 0x216a7f8a, 0x3706936e)
    TEST_SUB_W(0x2ab54d0e, 0x90f7c654, 0x99bd86ba)
    TEST_SUB_W(0x93f64860, 0xeeaaa800, 0xa54ba060)
    TEST_SUB_W(0x947e3bc0, 0xd101721c, 0xc37cc9a4)
    TEST_SUB_W(0x08b05218, 0xf7df14c0, 0x10d13d58)
    TEST_SUB_W(0x8b990582, 0xb45eca88, 0xd73a3afa)
    TEST_SUB_W(0x54a09c60, 0xf065ff59, 0x643a9d07)
    TEST_SUB_W(0x02a4e3d2, 0x5ca75800, 0xa5fd8bd2)
    TEST_SUB_W(0x7102c503, 0x458eeabf, 0x2b73da44)
    TEST_SUB_W(0x84930c00, 0xf5c04224, 0x8ed2c9dc)
    TEST_SUB_W(0xe1f55702, 0x41fc2a68, 0x9ff92c9a)
    TEST_SUB_W(0xfe1b55e2, 0x44d4b784, 0xb9469e5e)
    TEST_SUB_W(0xa8c699f8, 0x4056c3a8, 0x686fd650)
    TEST_SUB_W(0xe6e6ad02, 0x06c3f8bc, 0xe022b446)
    TEST_SUB_W(0xf30570c0, 0x2fd86c00, 0xc32d04c0)
    TEST_SUB_W(0x6addb000, 0x72ddf116, 0xf7ffbeea)
    TEST_SUB_W(0x005a4666, 0x87aa08e6, 0x78b03d80)
    TEST_SUB_W(0x92c34fdc, 0xeed15158, 0xa3f1fe84)
    TEST_SUB_W(0x00000000, 0x00000000, 0x00000000)
###detect exception
    bne s2, zero, inst_error
    nop
###score ++
    addi.w s3, s3, 1
###output (s0<<24)|s3
inst_error:  
    slli.w t1, s0, 24
    NOP4
    or t0, t1, s3 
    NOP4
    st.w t0, s1, 0
    jirl zero, ra, 0
    nop
END(n4_sub_w_test)
