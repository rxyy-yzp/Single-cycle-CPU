#include "asm.h"
#include "regdef.h"
#include "inst_test.h"

LEAF(n16_beq_test)
    
    addi.w s0, s0 ,1
    li  s2, 0x0
###test inst
    TEST_BEQ(0x52919078, 0x81468400, 0x0fb16a80, 0xdf225ddc, 0x00000000, 0x00000000)
    TEST_BEQ(0x90db14d8, 0xa81a7400, 0x2fdac790, 0xe4a202d3, 0x00000000, 0x00000000)
    TEST_BEQ(0xbca1eea8, 0xa4ac24ae, 0xc64ac344, 0xc38ed9a0, 0x00000000, 0x00000000)
    TEST_BEQ(0xc7820fa8, 0x71f9dbb0, 0x523b85b0, 0xcb7dbd40, 0x00000000, 0x00000000)
    TEST_BEQ(0x65a8a904, 0x042a7ac0, 0x2308a218, 0x602bdf60, 0x00000000, 0x00000000)
    TEST_BEQ(0x7d5d9210, 0x44f63240, 0x55a9ccbe, 0x80212b6f, 0x00000000, 0x00000000)
    TEST_BEQ(0x0c81c340, 0x6ef54770, 0xc8b25370, 0xe76ee2aa, 0x00000000, 0x00000000)
    TEST_BEQ(0xf14588c0, 0x433941dc, 0x15110ec0, 0xf5606dc1, 0x00000000, 0x00000000)
    TEST_BEQ(0x12c43800, 0xf82f4330, 0x56c2e54e, 0xe0bc64db, 0x00000000, 0x00000000)
    TEST_BEQ(0xd72a545c, 0xd72a545c, 0xdca8bae0, 0x21649da0, 0xdca8bae0, 0x21649da0)
    TEST_BEQ(0x65e7a8d1, 0x65e7a8d1, 0xae111cc0, 0x19b22c18, 0xae111cc0, 0x19b22c18)
    TEST_BEQ(0x4bf9c400, 0x4bf9c400, 0xbd225e68, 0x7300cf7d, 0xbd225e68, 0x7300cf7d)
    TEST_BEQ(0xc0927092, 0xc0927092, 0x91b9a6b4, 0xe38847c0, 0x91b9a6b4, 0xe38847c0)
    TEST_BEQ(0x4ea8197a, 0x4ea8197a, 0x1b258c10, 0xc948fccc, 0x1b258c10, 0xc948fccc)
    TEST_BEQ(0x62fb4a80, 0x62fb4a80, 0x166a1ae0, 0x107af4b4, 0x166a1ae0, 0x107af4b4)
    TEST_BEQ(0x56a04234, 0x56a04234, 0xb13d6c84, 0x464b2238, 0xb13d6c84, 0x464b2238)
    TEST_BEQ(0xd1c91084, 0xd1c91084, 0xe3700592, 0xa4ef050e, 0xe3700592, 0xa4ef050e)
    TEST_BEQ(0x94223f24, 0x94223f24, 0xe77f3df0, 0x9285f1b4, 0xe77f3df0, 0x9285f1b4)
    TEST_BEQ(0x13b85cc0, 0x13b85cc0, 0x0c089630, 0x721a3810, 0x0c089630, 0x721a3810)
    TEST_BEQ(0xc41dbf64, 0xc41dbf64, 0xa537e80b, 0x53d5947e, 0xa537e80b, 0x53d5947e)
    TEST_BEQ(0x60af6080, 0x60af6080, 0x5b330ae5, 0x2d2576be, 0x5b330ae5, 0x2d2576be)
    TEST_BEQ(0x8541cd00, 0x8541cd00, 0x3c52c34c, 0x621695c7, 0x3c52c34c, 0x621695c7)
    TEST_BEQ(0x097f2a98, 0x097f2a98, 0x1fce9240, 0x8a958480, 0x1fce9240, 0x8a958480)
    TEST_BEQ(0x98325f68, 0x98325f68, 0x8bcefd8a, 0x85c3e632, 0x8bcefd8a, 0x85c3e632)
    TEST_BEQ(0x9a996134, 0x9a996134, 0x8294e540, 0x78b041e0, 0x8294e540, 0x78b041e0)
    TEST_BEQ(0xefb0dd7c, 0xefb0dd7c, 0xa3c96acc, 0x07916ea6, 0xa3c96acc, 0x07916ea6)
    TEST_BEQ(0xa877ea18, 0xa877ea18, 0x0192dd01, 0x4aaaada0, 0x0192dd01, 0x4aaaada0)
    TEST_BEQ(0x235b4c11, 0x235b4c11, 0x6d529950, 0x22370e98, 0x6d529950, 0x22370e98)
    TEST_BEQ(0xfb177658, 0xfb177658, 0x1ae45760, 0x4a9e5ace, 0x1ae45760, 0x4a9e5ace)
    TEST_BEQ(0x8fd70840, 0x8fd70840, 0x15f0a7a0, 0xaeaeccec, 0x15f0a7a0, 0xaeaeccec)
    TEST_BEQ(0xdf9a8a5a, 0xdf9a8a5a, 0xf176807e, 0x5ae91f7c, 0xf176807e, 0x5ae91f7c)
    TEST_BEQ(0xcdc6657c, 0xcdc6657c, 0xcc169869, 0x9c72bd96, 0xcc169869, 0x9c72bd96)
    TEST_BEQ(0xf16f8ac4, 0xf16f8ac4, 0x7d005284, 0xd1e9500c, 0x7d005284, 0xd1e9500c)
    TEST_BEQ(0x24c37e78, 0x24c37e78, 0x4cfa0eda, 0x34c27390, 0x4cfa0eda, 0x34c27390)
    TEST_BEQ(0xab37fdec, 0xab37fdec, 0x450e7c0c, 0x639d0ef8, 0x450e7c0c, 0x639d0ef8)
    TEST_BEQ(0x235843c0, 0x235843c0, 0x5b269f78, 0xc0952a80, 0x5b269f78, 0xc0952a80)
    TEST_BEQ(0x1ff5d45e, 0x1ff5d45e, 0x4740bb7e, 0x9ea80c50, 0x4740bb7e, 0x9ea80c50)
    TEST_BEQ(0xefe103c0, 0xefe103c0, 0x9d6066bc, 0xb59055d0, 0x9d6066bc, 0xb59055d0)
    TEST_BEQ(0x3e7f4ab4, 0x3e7f4ab4, 0x8e0d0eaa, 0xa926fe80, 0x8e0d0eaa, 0xa926fe80)
    TEST_BEQ(0x09c6dada, 0x09c6dada, 0xeaf51224, 0x987934bc, 0xeaf51224, 0x987934bc)
    TEST_BEQ(0x4579a63c, 0x4579a63c, 0xc4d7fd40, 0xceab5484, 0xc4d7fd40, 0xceab5484)
    TEST_BEQ(0xebdf3bec, 0xebdf3bec, 0xdea63aa0, 0xeffcc28e, 0xdea63aa0, 0xeffcc28e)
    TEST_BEQ(0xdf35158c, 0xdf35158c, 0x8de32077, 0xd4964a7c, 0x8de32077, 0xd4964a7c)
    TEST_BEQ(0xdeebed02, 0x00000000, 0xe1182ccd, 0xe0612000, 0x00000000, 0x00000000)
    TEST_BEQ(0x2232ed80, 0x00000000, 0xd8f17ee0, 0x9913158d, 0x00000000, 0x00000000)
    TEST_BEQ(0x05f036c0, 0x00000000, 0x33db5b48, 0x90d85000, 0x00000000, 0x00000000)
    TEST_BEQ(0x387e92ac, 0x00000000, 0x34eef8d0, 0x3b7661f7, 0x00000000, 0x00000000)
    TEST_BEQ(0x508f91b8, 0x00000000, 0x9e761c58, 0x929bf0c8, 0x00000000, 0x00000000)
    TEST_BEQ(0xe3d3e0e0, 0x00000000, 0x6b1095f1, 0xee9578b2, 0x00000000, 0x00000000)
    TEST_BEQ(0x17a83a00, 0x00000000, 0xe4f4a370, 0x84816826, 0x00000000, 0x00000000)
    TEST_BEQ(0x74d2dd3b, 0x00000000, 0xec065b70, 0x3dc99838, 0x00000000, 0x00000000)
    TEST_BEQ(0xacc48022, 0x00000000, 0x6bd55fc5, 0xeee02690, 0x00000000, 0x00000000)

    TEST_BEQ(0x00000000, 0x77c77558, 0xdf7c77fa, 0x64527238, 0x00000000, 0x00000000)
    TEST_BEQ(0x00000000, 0x24922d7c, 0xd2894566, 0x07830114, 0x00000000, 0x00000000)
    TEST_BEQ(0x00000000, 0x6b926783, 0xdbc3f268, 0x0a44caf8, 0x00000000, 0x00000000)
    TEST_BEQ(0x00000000, 0x00000000, 0xfc98d552, 0xca9087ec, 0xfc98d552, 0xca9087ec)
###detect exception
    bne s2, zero, inst_error
    nop
###score ++
    addi.w s3, s3, 1
###output (s0<<24)|s3
inst_error:  
    slli.w t1, s0, 24
    NOP4
    or t0, t1, s3 
    NOP4
    st.w t0, s1, 0
    jirl zero, ra, 0
    nop
END(n16_beq_test)
